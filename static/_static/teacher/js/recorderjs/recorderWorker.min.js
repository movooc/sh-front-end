var recLength=0,recBuffers=[],mp3Buffers=[],maxSamples=1152,sampleRate,numChannels,mp3Encoder;this.onmessage=function(e){switch(e.data.command){case'init':init(e.data.config);break;case'record':record(e.data.buffer);break;case'exportWAV':exportWAV(e.data.type);break;case'exportMP3':exportMP3(e.data.type);break;case'getBuffers':getBuffers();break;case'clear':clear();break}};function init(config){sampleRate=config.sampleRate;numChannels=config.numChannels;importScripts(config.path);initBuffers();initLame()}function record(inputBuffer){for(var channel=0;channel<numChannels;channel++){recBuffers[channel].push(inputBuffer[channel])}recLength+=inputBuffer[0].length;if(numChannels===2){encodeMP3(inputBuffer)}else{encodeMP3(inputBuffer[0])}}function exportWAV(type){var buffers=[];for(var channel=0;channel<numChannels;channel++){buffers.push(mergeBuffers(recBuffers[channel],recLength))}if(numChannels===2){var interleaved=interleave(buffers[0],buffers[1])}else{var interleaved=buffers[0]}var dataview=encodeWAV(interleaved);var audioBlob=new Blob([dataview],{type:type});this.postMessage(audioBlob)}function exportMP3(type){appendToMp3Buffer(mp3Encoder.flush());setTimeout(()=>{let audioBlob=new Blob(mp3Buffers,{type:type});this.postMessage(audioBlob);clear()},500)}function getBuffers(){var buffers=[];for(var channel=0;channel<numChannels;channel++){buffers.push(mergeBuffers(recBuffers[channel],recLength))}this.postMessage(buffers)}function clear(){recLength=0;recBuffers=[];initBuffers();clearMp3()}function clearMp3(){mp3Buffers=[]}function initBuffers(){for(var channel=0;channel<numChannels;channel++){recBuffers[channel]=[]}}function initLame(){mp3Encoder=new lamejs.Mp3Encoder(numChannels,sampleRate,128)}function mergeBuffers(recBuffers,recLength){var result=new Float32Array(recLength);var offset=0;for(var i=0;i<recBuffers.length;i++){result.set(recBuffers[i],offset);offset+=recBuffers[i].length}return result}function interleave(inputL,inputR){var length=inputL.length+inputR.length;var result=new Float32Array(length);var index=0,inputIndex=0;while(index<length){result[index++]=inputL[inputIndex];result[index++]=inputR[inputIndex];inputIndex++}return result}function appendToMp3Buffer(mp3Buf){mp3Buffers.push(new Int8Array(mp3Buf))}function convertBuffer(arrayBuffer){let data=new Float32Array(arrayBuffer);let out=new Int16Array(arrayBuffer.length);floatTo16Mp3BitPCM(data,out);return out}function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?s*0x8000:s*0x7FFF,true)}}function floatTo16Mp3BitPCM(input,output){for(let i=0;i<input.length;i++){let s=Math.max(-1,Math.min(1,input[i]));output[i]=(s<0?s*0x8000:s*0x7FFF)}}function writeString(view,offset,string){for(var i=0;i<string.length;i++){view.setUint8(offset+i,string.charCodeAt(i))}}function encodeWAV(samples){var buffer=new ArrayBuffer(44+samples.length*2);var view=new DataView(buffer);writeString(view,0,'RIFF');view.setUint32(4,36+samples.length*2,true);writeString(view,8,'WAVE');writeString(view,12,'fmt ');view.setUint32(16,16,true);view.setUint16(20,1,true);view.setUint16(22,numChannels,true);view.setUint32(24,sampleRate,true);view.setUint32(28,sampleRate*4,true);view.setUint16(32,numChannels*2,true);view.setUint16(34,16,true);writeString(view,36,'data');view.setUint32(40,samples.length*2,true);floatTo16BitPCM(view,44,samples);return view}function encodeMP3(arrayBuffer){let samplesMono=convertBuffer(arrayBuffer);let remaining=samplesMono.length;for(let i=0;remaining>=0;i+=maxSamples){let left=samplesMono.subarray(i,i+maxSamples);let mp3buf=mp3Encoder.encodeBuffer(left);appendToMp3Buffer(mp3buf);remaining-=maxSamples}}
